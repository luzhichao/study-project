spring.application.name=gecko-spring-boot
spring.profiles.active=dev
# log
logging.config=classpath:config/logback.xml
# redis
spring.redis.cluster.nodes=reformer-redis-cluster-01:7011,reformer-redis-cluster-01:7012,reformer-redis-cluster-01:7013,reformer-redis-cluster-02:7011,reformer-redis-cluster-02:7012,reformer-redis-cluster-02:7013
spring.redis.password=ENC(ZI+9TXOkzl9fTy7z+kinX0yixvC03Et6N3hpT66TlCOKkewaqf93KQEFKiHX5Ymh)
# datasource
spring.datasource.url=jdbc:mysql://reformer-mysql:7006/lzc_test?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8&nullCatalogMeansCurrent=true
spring.datasource.username=ENC(AoVbbpiK7ENAn0rXKYxSw1KQHkNnYa/1K6vIDPEjUn/RQGT9VpYh2SyydqF/s/k+)
spring.datasource.password=ENC(0csxUtF5X0ww/Ka+6cI7QL4fiiOjdd62fohFn3sKlTciRmNKd+NEW6O2LT/qpcrU)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# trigger\u914D\u7F6E
#reformer.gecko.trigger.store=ram


# \u662F\u5426\u5F00\u542F\u5C01\u88C5\u914D\u7F6E\uFF0C\u9ED8\u8BA4false
reformer.gecko.kafka.enable=true
# \u662F\u5426\u5F00\u542F\u6279\u91CF\u6D88\u8D39\uFF0C\u9ED8\u8BA4false
reformer.gecko.kafka.batch-listener=true
# \u9ED8\u8BA4topic\uFF0C\u9ED8\u8BA4\u503C"RF-KAFKA-DEFAULT-TOPIC"
reformer.gecko.kafka.default-topic=RF-KAFKA-DEFAULT-TOPIC
# \u53D1\u9001\u6D88\u606F\u5EF6\u8FDF\uFF0C\u6BEB\u79D2\u9ED8\u8BA4100
reformer.gecko.kafka.linger-ms=100
# \u8BF7\u6C42\u8D85\u65F6\u65F6\u95F4\uFF0C\u6BEB\u79D2\uFF0C\u9ED8\u8BA440000
reformer.gecko.kafka.request-timeout-ms=40000
# \u4F1A\u8BDD\u8D85\u65F6\u65F6\u95F4
reformer.gecko.kafka.session-timeout-ms=120000


# kafka
spring.kafka.bootstrap-servers=192.168.11.103:9092,192.168.11.104:9092,192.168.11.105:9092

# \u53D1\u9001\u6D88\u606F\u786E\u8BA4\u6A21\u5F0F\uFF0C\u9ED8\u8BA4all
spring.kafka.producer.acks=all
# \u9519\u8BEF\u91CD\u8BD5\u6B21\u6570\uFF0C\u9ED8\u8BA40\u4E0D\u91CD\u8BD5
spring.kafka.producer.retries=0
# \u6D88\u606F\u6279\u5904\u7406\u5927\u5C0F\uFF0C\u5355\u4F4DB\uFF0C\u9ED8\u8BA416384
spring.kafka.producer.batch-size=163840
# \u53D1\u9001\u6D88\u606F\u7F13\u51B2\u533A\uFF0C\u5355\u4F4DB\uFF0C\u9ED8\u8BA433554432
spring.kafka.producer.buffer-memory=33554432

# \u6D88\u8D39\u7EC4ID\uFF0C\u4F18\u5148\u7EA7\uFF1A\u81EA\u5B9A\u4E49\u914D\u7F6E->\u9879\u76EE\u540D\u79F0
spring.kafka.consumer.group-id=${spring.application.name}
# \u6D88\u8D39\u8BFB\u53D6\u504F\u79FB\u91CF\u914D\u7F6E\uFF0C\u9ED8\u8BA4latest
spring.kafka.consumer.auto-offset-reset=latest
# \u662F\u5426\u5F00\u542F\u81EA\u52A8\u63D0\u4EA4\uFF0C\u987B\u914D\u5408ackMode\u4F7F\u7528
spring.kafka.consumer.enable-auto-commit=false
# \u6279\u91CF\u6D88\u8D39\u7684\u6700\u5927\u6570\u636E\u6761\u6570\uFF0C\u9ED8\u8BA4100
spring.kafka.consumer.max-poll-records=100

# \u6D88\u8D39\u8005\u7EC4\u4E2D\u7EBF\u7A0B\u6570\u91CF\uFF0C\u9ED8\u8BA41
spring.kafka.listener.concurrency=1
# \u6D88\u8D39\u6570\u636E\u63D0\u4EA4\u6A21\u5F0F\uFF0C\u9ED8\u8BA4\u65F6\u95F4+\u6761\u6570
spring.kafka.listener.ack-mode=count_time
# \u6D88\u8D39\u65F6\u7B49\u5F85\u7684\u6700\u5927\u65F6\u95F4\uFF0C\u6BEB\u79D2\u9ED8\u8BA41000
spring.kafka.listener.poll-timeout=1000



